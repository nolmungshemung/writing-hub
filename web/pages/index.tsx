import type { NextPage } from 'next';
import Head from 'next/head';
import { useState, ChangeEvent, MouseEvent } from 'react';
import { dehydrate, QueryClient, useQueryClient } from 'react-query';
import { getTodos } from '~/data/todo/todo.api';
import TodoItem from '~/components/Todo/TodoItem';
import {
  useTodoList,
  useCreateTodo,
  useDeleteTodo,
} from '~/data/todo/todo.hooks';

const Home: NextPage = () => {
  const queryClient = useQueryClient();

  const [value, setValue] = useState('');
  const { data: todos, isLoading, error } = useTodoList();
  const createMutation = useCreateTodo({
    onSuccess() {
      queryClient.invalidateQueries('todos');
    },
    onError(error) {
      console.error(error);
    },
  });

  const onChange = (e: ChangeEvent<HTMLInputElement>) => {
    setValue(e.target.value);
  };

  const onClick = (e: MouseEvent<HTMLButtonElement>) => {
    if (!!todos) {
      const newId = todos.reduce((newId, todo) => {
        return newId > todo.id ? newId : todo.id;
      }, 0);

      createMutation.mutate({
        id: newId + 1,
        text: value,
        isDone: false,
      });
      setValue('');
    }
  };

  const renderTodoList = () => {
    if (isLoading) {
      return <div>loading...</div>;
    }

    if (error) {
      return <div>error...</div>;
    }

    if (!!todos) {
      return (
        <div className="App__Container">
          <input type="text" value={value} onChange={onChange} />
          <button className="Create__Button" onClick={onClick}>
            Create
          </button>
          {todos?.map((todo) => (
            <TodoItem key={todo.id} todo={todo} />
          ))}
        </div>
      );
    } else {
      return <div>empty Todo data...</div>;
    }
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>{renderTodoList()}</div>
    </div>
  );
};

/**
 * @see https://react-query.tanstack.com/guides/ssr
 */
// export async function getServerSideProps() {
//   const queryClient = new QueryClient();

//   await queryClient.prefetchInfiniteQuery('todos', () => getTodos(), {
//     staleTime: 10000,
//   });

//   /**
//    * @see https://github.com/tannerlinsley/react-query/issues/1458
//    */
//   const dehydratedState = JSON.parse(JSON.stringify(dehydrate(queryClient)));

//   return {
//     props: {
//       dehydratedState,
//     },
//   };
// }

export default Home;
